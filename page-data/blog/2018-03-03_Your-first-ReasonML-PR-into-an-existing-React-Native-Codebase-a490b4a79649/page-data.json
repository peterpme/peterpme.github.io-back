{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018-03-03_Your-first-ReasonML-PR-into-an-existing-React-Native-Codebase-a490b4a79649/","webpackCompilationHash":"f146ed55f93bb0a77a00","result":{"data":{"site":{"siteMetadata":{"title":"Peter Piekarczyk","author":"@peterpme"}},"markdownRemark":{"id":"5a907549-0edb-5188-b68b-21524a036630","excerpt":"A delightful plate of Reason. Take a bite! by [Amy Treasure](https://unsplash.com/photos/WoVGndRTx2o?utm_source=unsplash…","html":"<p><img src=\"https://cdn-images-1.medium.com/max/1200/1*SaPK2OLdX_BeFp7yxRvbcg.jpeg\" alt=\"A delightful plate of Reason. Take a bite! by [Amy Treasure](https://unsplash.com/photos/WoVGndRTx2o?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText) on [Unsplash](https://unsplash.com/search/photos/reason?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText)\">\nA delightful plate of Reason. Take a bite! by <a href=\"https://unsplash.com/photos/WoVGndRTx2o?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Amy Treasure</a> on <a href=\"https://unsplash.com/search/photos/reason?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Unsplash</a></p>\n<p>ReasonML is becoming a popular way of building React apps. It’s based on the OCaml programming language with syntax very similar to JavaScript but with a compiler that warns you early on, instead of when your app is live!</p>\n<p>If you’ve been sold on ReasonML and you’re ready to incorporate your first component into a personal or better yet — company project!, this article is for you!</p>\n<h3 id=\"read-this-first\"><a href=\"#read-this-first\" aria-label=\"read this first permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Read This First</h3>\n<p>My goal is for you to get your first PR out the door. I’m skipping over a lot of the “why” and jumping right into “this is how”.</p>\n<p>Learning something new is never easy. Making time for learning is already a struggle given how much bosses are piling onto our plates these days. I want to make this as stress-free and simple for you as possible.</p>\n<p>If you find that it’s not, just <a href=\"https://twitter.com/peterpme\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">let me know.</a> Until then sit back, relax, stretch your copy-and-paste fingers and follow along. Welcome to Reason.</p>\n<h3 id=\"installing-reason\"><a href=\"#installing-reason\" aria-label=\"installing reason permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing Reason</h3>\n<p>A huge convenience of Reason is being able to install everything through npm. That makes it super easy to get started. <a href=\"https://github.com/reasonml-community/bs-react-native\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Read more about it here.</a></p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">yarn add --dev bs-platform &amp;&amp; yarn add reason-react bs-react-native</code></pre></div>\n<h4 id=\"create-a-bsconfigjson\"><a href=\"#create-a-bsconfigjson\" aria-label=\"create a bsconfigjson permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create a bsconfig.json</h4>\n<p>bsconfig.json is a file that supports settings for <a href=\"https://bucklescript.github.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bucklescript</a>. After looking at a bunch of these, I’ve concluded that they’re usually exactly the same.</p>\n<p><strong>Altos is the name of my app. You should replace that 😃</strong></p>\n<h4 id=\"add-scripts\"><a href=\"#add-scripts\" aria-label=\"add scripts permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add Scripts</h4>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bsb -make-world -clean-world\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bsb -make-world -clean-world -w\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"project-structure\"><a href=\"#project-structure\" aria-label=\"project structure permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Project Structure</h4>\n<p>Create a <code class=\"language-text\">re</code> folder next to package.json This is where all of your components will live. In our <code class=\"language-text\">bsconfig.json</code> file we have <code class=\"language-text\">sources</code> that already include <code class=\"language-text\">re</code> . <a href=\"https://reasonml.github.io/docs/en/project-structure.html#publishing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Here are some other great guidelines</a>.</p>\n<p>All your components will need to be capitalized:</p>\n<ul>\n<li>Typography.re</li>\n<li>Label.re</li>\n<li>Add the following to your <code class=\"language-text\">.gitignore:</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">.merlin\n.bsb.lock\nlib</code></pre></div>\n<h4 id=\"bsjs-files\"><a href=\"#bsjs-files\" aria-label=\"bsjs files permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>.bs.js files</h4>\n<p>If you want to sneak Reason into your codebase without forcing your teammates to install <code class=\"language-text\">bs-platform</code> you’re welcome to add the generated <code class=\"language-text\">*.bs.js</code> files. That being said, you might face merge conflicts down the road.</p>\n<p>If your teammates are all cool with Reason, place <code class=\"language-text\">*.bs.js</code> inside your <code class=\"language-text\">.gitignore</code> and have them install <code class=\"language-text\">bs-platform.</code></p>\n<p>Every team is different so I leave this decision up to you. Chances are you can get away with including them and <a href=\"https://reasonml.chat/t/should-i-include-or-exclude-bs-js-files-in-git/60\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">figure it out later.</a></p>\n<h4 id=\"press-play\"><a href=\"#press-play\" aria-label=\"press play permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Press Play</h4>\n<ol>\n<li>Open up a terminal window and run <code class=\"language-text\">yarn watch or npm run watch</code></li>\n<li>Start your React Native Project <code class=\"language-text\">react-native run-ios</code> or <code class=\"language-text\">expo start</code></li>\n</ol>\n<p>If nothing broke, you have succeeded in getting your project ready for Reason! Pat yourself on the back — you have taken an enormous step forward to your first Reason pull request!</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2560/1*0Q7LTDXRR0b89ByL9nbrpg.jpeg\" alt=\"Delicious bite-size chunks of Reason by [Rose Elena](https://unsplash.com/photos/llWdsvyRxYA?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText) on [Unsplash](https://unsplash.com/search/photos/treats?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText)\">\nDelicious bite-size chunks of Reason by <a href=\"https://unsplash.com/photos/llWdsvyRxYA?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rose Elena</a> on <a href=\"https://unsplash.com/search/photos/treats?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Unsplash</a></p>\n<h3 id=\"your-first-component\"><a href=\"#your-first-component\" aria-label=\"your first component permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Your First Component</h3>\n<p>Creating your first component can be really easy or really hard. If you’re going to try and convert something with a lot of external modules, you’re going to have a bad time.</p>\n<p>The first component I introduced into our project was a simple Label:</p>\n<p>Label component in ReactJS</p>\n<p>The label consumes a prop <code class=\"language-text\">label</code> and sets the background color to gray. The only components I’m using are <code class=\"language-text\">View, Text, StyleSheet</code> because the bindings are supported by <a href=\"https://github.com/reasonml-community/bs-react-native\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bs-react-native</a>.</p>\n<p>Bindings let ReasonML know the type of your code from Javascript so it can save you from making silly mistakes later.</p>\n<h4 id=\"converting-to-reason\"><a href=\"#converting-to-reason\" aria-label=\"converting to reason permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Converting to Reason</h4>\n<p>At first glance, a lot of things are the same, but a lot are different. <strong>ReasonML requires semicolons!</strong> The compiler will delightfully let you know.</p>\n<p>The Label component converted to ReactReason.</p>\n<h4 id=\"imports\"><a href=\"#imports\" aria-label=\"imports permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Imports</h4>\n<p>In ReactJS and Javascript, you’d import something via <code class=\"language-text\">import React from &#39;react&#39;</code> or <code class=\"language-text\">const React = require(&#39;react&#39;).</code></p>\n<p>Reason will import the libraries you have installed automatically. We added them in <code class=\"language-text\">bsconfig.json.</code></p>\n<p>When you see <code class=\"language-text\">open BsReactNative</code> you’re doing something similar to <code class=\"language-text\">import { Component } from &#39;react&#39;.</code> You can <code class=\"language-text\">import React from &#39;react&#39;</code> and then call React.Component, or import the Component directly and save yourself some text.</p>\n<p>So, instead of writing <code class=\"language-text\">BsReactNative.StyleSheet, BsReactNative.View</code> I can <code class=\"language-text\">open BsReactNative</code> and write <code class=\"language-text\">StyleSheet, View</code> instead.</p>\n<h4 id=\"local-opens\"><a href=\"#local-opens\" aria-label=\"local opens permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Local Opens</h4>\n<div class=\"gatsby-highlight\" data-language=\"re\"><pre class=\"language-re\"><code class=\"language-re\">Style.(</code></pre></div>\n<p>A dot with nothing after it in this case is called a “local open”. Its the same as calling <code class=\"language-text\">import Style</code> but only for this function. This helps us avoid conflicts across the whole file.</p>\n<p>See how within the function we’re calling <code class=\"language-text\">borderRadius</code> ? We could also do something like this instead:</p>\n<div class=\"gatsby-highlight\" data-language=\"re\"><pre class=\"language-re\"><code class=\"language-re\">style=(\n Style.style([\n Style.borderRadius(4.)\n]);</code></pre></div>\n<p><em>(thanks to</em> <a href=\"https://medium.com/u/ddb95b022776\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>Sean Grove</em></a> <em>for pointing this out!)</em></p>\n<h4 id=\"styling--stylesheets\"><a href=\"#styling--stylesheets\" aria-label=\"styling  stylesheets permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Styling / StyleSheets</h4>\n<p>Styling is tricky at first but gets easier over time. Let me save you a lot of time and effort by linking you to <a href=\"https://github.com/reasonml-community/bs-react-native/blob/master/src/style.rei\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">all the style types supported by bs-react-native</a>. I’d highly recommend keep this open until you get the hang of it!</p>\n<p>Why is styling tricky? Because you’re not used to typing things a certain way. Here’s a great example:</p>\n<div class=\"gatsby-highlight\" data-language=\"re\"><pre class=\"language-re\"><code class=\"language-re\">borderRadius(4.)</code></pre></div>\n<p>vs</p>\n<div class=\"gatsby-highlight\" data-language=\"re\"><pre class=\"language-re\"><code class=\"language-re\">paddingHorizontal(Pt(10.))</code></pre></div>\n<p>In ReactJS, <code class=\"language-text\">borderRadius</code> and <code class=\"language-text\">paddingHorizontal</code> are the same type (number). but in ReactReason, they’re different:</p>\n<ul>\n<li><code class=\"language-text\">borderRadius</code> is a <a href=\"https://github.com/reasonml-community/bs-react-native/blob/master/src/style.rei#L278\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">float</a>.</li>\n<li><code class=\"language-text\">paddingHorizontal</code> is a <a href=\"https://github.com/reasonml-community/bs-react-native/blob/master/src/style.rei#L156\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pt_pct</a>. <code class=\"language-text\">pt_pct</code> isn’t a Reason thing. It’s a type within the bs-react-native library that means:</li>\n</ul>\n<blockquote>\n<p>This can either be a float wrapped by point (pt) or a float wrapped by a percentage (pct)</p>\n</blockquote>\n<h4 id=\"components\"><a href=\"#components\" aria-label=\"components permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Components</h4>\n<p>A stateless function component in ReactJs will be represented by a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Label</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> label <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In Reason React:</p>\n<div class=\"gatsby-highlight\" data-language=\"re\"><pre class=\"language-re\"><code class=\"language-re\">*/ Label.re */\n\n[@react.component]\nlet make = (~label) =&gt; &lt;Text&gt; {React.string(label)} &lt;/Text&gt;</code></pre></div>\n<p><code class=\"language-text\">[@react.component]</code>:</p>\n<p>You put this above every component. Think of this like a decorator in Javascript. It knows to convert the sugar to React calls.</p>\n<p>The arguments:</p>\n<ul>\n<li>Optional components look like this: <code class=\"language-text\">~label=?</code> with an <code class=\"language-text\">=?</code> at th\ne end</li>\n<li>Default arguments should look familiar: <code class=\"language-text\">label=&quot;Network&quot;</code></li>\n</ul>\n<h4 id=\"stringtoelement\"><a href=\"#stringtoelement\" aria-label=\"stringtoelement permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>stringToElement</h4>\n<p>If you try to display your label the same way you would in ReactJS, you’ll be greeted with a compiler error. That’s because you have to convert the string to an React element: <code class=\"language-text\">ReasonReact.stringToElement(label).</code> Why do we do this? Because <a href=\"https://reasonml.github.io/reason-react/docs/en/render.html#docsNav\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reason’s type system restricts you from passing arbitrary data</a>.</p>\n<p>You’ll also notice a space between <code class=\"language-text\">&lt;Text&gt; &lt;/Text&gt;</code>. That’s intentional!</p>\n<p>There’s a good chance you’re going to display a number in your first component. That would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"re\"><pre class=\"language-re\"><code class=\"language-re\">&lt;Text&gt; {ReasonReact.stringToElement(string_of_int(10)} &lt;/Text&gt;</code></pre></div>\n<p>There’s a <a href=\"https://reasonml.github.io/reason-react/docs/en/render.html#docsNav\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">couple of different</a> special element types you might need, but I would strongly suggest you focus on a simple component first.</p>\n<h4 id=\"exporting-your-component-to-js-land\"><a href=\"#exporting-your-component-to-js-land\" aria-label=\"exporting your component to js land permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exporting your component to JS land</h4>\n<p>In ReactJS, you’d write <code class=\"language-text\">export default</code> or <code class=\"language-text\">export const</code> and consume your component the way you would with anything else.</p>\n<p>In ReasonReact, there’s an extra step you have to take via <code class=\"language-text\">wrapReasonForJs</code> .</p>\n<div class=\"gatsby-highlight\" data-language=\"re\"><pre class=\"language-re\"><code class=\"language-re\">let default =\n  ReasonReact.wrapReasonForJs(~component, jsProps =&gt;\n    make(~label=jsProps##label, [||])\n  );</code></pre></div>\n<p>Basically the pattern is to take your props (in this case we only have label) and pass them in as: <code class=\"language-text\">~label=jsProps##label</code> . Children will look like: <code class=\"language-text\">[||]</code> .</p>\n<h4 id=\"use-it\"><a href=\"#use-it\" aria-label=\"use it permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use it!</h4>\n<p>You’ve done such a great job putting together your first component, it’s time for you to use it. Just import it with the <code class=\"language-text\">bs</code> extension:</p>\n<div class=\"gatsby-highlight\" data-language=\"re\"><pre class=\"language-re\"><code class=\"language-re\">import Label from &quot;./re/Label.bs.js&quot;\n\n&lt;Label label=&quot;REACT NATIVE&quot; /&gt;</code></pre></div>\n<h3 id=\"push-it-up--let-me-know\"><a href=\"#push-it-up--let-me-know\" aria-label=\"push it up  let me know permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Push it up &#x26; let me know!</h3>\n<p>I challenge you to create one small, tiny Reason component and introduce it into your company’s React Native app. If you do, please <a href=\"https://twitter.com/peterpme\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">let me know!!</a></p>\n<p>Otherwise, until you’re ready <a href=\"https://twitter.com/peterpme\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">follow me on Twitter</a>. You’ll see a lot of Reason-related stuff.</p>\n<p><a href=\"https://github.com/peterpme/reason-react-native-example\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">I created a base repo of this &#x26; expo as a reference.</a></p>\n<p><em>Thanks to</em> <a href=\"https://khoanguyen.me/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>thangngoc89</em></a> <em>and</em> <a href=\"http://www.riseos.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>sgrove</em></a> <em>for peer-reviewing this.</em></p>","timeToRead":8,"fields":{"slug":"blog/2018-03-03_Your-first-ReasonML-PR-into-an-existing-React-Native-Codebase-a490b4a79649/"},"frontmatter":{"title":"Your first ReasonML PR into an existing React Native Codebase","date":"March 03, 2018","description":"Type-safe, fast with a similar syntax to javascript makes it an obvious choice."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"blog/2018-03-03_Your-first-ReasonML-PR-into-an-existing-React-Native-Codebase-a490b4a79649/","previous":{"fields":{"slug":"blog/2018-02-05_Taming-React-Native-s-ScrollView-with-flex-144e6ff76c08/"},"frontmatter":{"title":"Taming React Native’s ScrollView with flex"}},"next":{"fields":{"slug":"blog/2018-04-24_Learning-Higher-Order-Components-in-React-by-Building-a-Loading-Screen-9f705b89f569/"},"frontmatter":{"title":"Learning Higher-Order Components in React"}}}}}