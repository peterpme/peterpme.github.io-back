{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018-04-24_Learning-Higher-Order-Components-in-React-by-Building-a-Loading-Screen-9f705b89f569/","webpackCompilationHash":"f146ed55f93bb0a77a00","result":{"data":{"site":{"siteMetadata":{"title":"Peter Piekarczyk","author":"@peterpme"}},"markdownRemark":{"id":"53da20bb-c35f-551c-9612-d62924d073ca","excerpt":"A higher-order component in the wild by [Gamze Bozkaya](https://unsplash.com/photos/kxGHHEjUP7Q?utm_source=unsplash&utmâ€¦","html":"<p><img src=\"https://cdn-images-1.medium.com/max/1200/1*WqA5KCPtu44P14_6NgX3Bw.jpeg\" alt=\"A higher-order component in the wild by [Gamze Bozkaya](https://unsplash.com/photos/kxGHHEjUP7Q?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText) onÂ [Unsplash](https://unsplash.com/search/photos/higher-order?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText)\">\nA higher-order component in the wild by <a href=\"https://unsplash.com/photos/kxGHHEjUP7Q?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gamze Bozkaya</a> onÂ <a href=\"https://unsplash.com/search/photos/higher-order?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Unsplash</a></p>\n<p>Let me share a secret: no matter how long youâ€™ve been doing something, youâ€™re bound to have to relearn some part of it. I havenâ€™t built my own higher-order component in a long time and made a lot of mistakes. Real mistakes.</p>\n<h3 id=\"why\"><a href=\"#why\" aria-label=\"why permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why?</h3>\n<p>The other day I was adding a simple loading indicator to screens in my new app. Youâ€™ve probably used this pattern before:</p>\n<p>An InfoScreen that renders Hi when loading is false in React Native</p>\n<p>This is great. Itâ€™s simple and convenient for one screen. If youâ€™re not used to React Native, <code class=\"language-text\">ActivityIndicator</code> is one of the beautiful parts of app developmentâ€Šâ€”â€Ša component that <em>exists</em>.</p>\n<p>When you find yourself repeating this same pattern often, its nice to see what we can do to rid ourselves from the tedious task of Copy &#x26; Paste.</p>\n<h3 id=\"what-do-i-know\"><a href=\"#what-do-i-know\" aria-label=\"what do i know permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What do IÂ know?</h3>\n<p>I know that Iâ€™ll have a <code class=\"language-text\">loading</code> prop FOR SURE.</p>\n<p>What am I apprehensive about? The strategy I will use to genuinely make my life easier (instead of harderâ€Šâ€”â€Šsometimes we need a friendly reminder).</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2560/1*KHFk4TZZQlAscHgktarR4w.jpeg\" alt=\"Highly Organized Fruit by [Alex Block](https://unsplash.com/photos/vWI1kTcMcDI?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText) onÂ [Unsplash](https://unsplash.com/search/photos/order?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText)\">\nHighly Organized Fruit by <a href=\"https://unsplash.com/photos/vWI1kTcMcDI?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Alex Block</a> onÂ <a href=\"https://unsplash.com/search/photos/order?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Unsplash</a></p>\n<h3 id=\"first-pass\"><a href=\"#first-pass\" aria-label=\"first pass permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>First Pass</h3>\n<p>First pass at a loading indicator higher-order component</p>\n<p>Besides the function wrapping <code class=\"language-text\">React.PureComponent</code> everything should look familiar. If you want to skip ahead and use this as-is, just paste this into our <code class=\"language-text\">InfoScreen</code> file and wrap the export:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withLoadingScreen</span><span class=\"token punctuation\">(</span>InfoScreen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This pattern may look familiar if youâ€™ve used Apollo or Redux before:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  mapStateToProps<span class=\"token punctuation\">,</span>\n  mapActionCreators\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>InfoScreen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"compose\"><a href=\"#compose\" aria-label=\"compose permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compose</h3>\n<p>If youâ€™re wondering how to use both <code class=\"language-text\">connect</code> and <code class=\"language-text\">withLoadingScreen</code> you can wrap the components individually or use a <code class=\"language-text\">compose</code> function. Writing a compose function by hand is cool, but importing the one from one of the libraries youâ€™re already using is cooler. Both <code class=\"language-text\">redux</code> and <code class=\"language-text\">react-apollo</code> come bundled with their own:</p>\n<p>various compose imports from redux / react-apollo</p>\n<h3 id=\"does-it-work\"><a href=\"#does-it-work\" aria-label=\"does it work permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Does itÂ work?</h3>\n<p>Depending on what your setup looks like, it might work perfectly or it might not work at all! ðŸ˜ƒ ðŸ™ƒ</p>\n<p>Iâ€™m using <code class=\"language-text\">react-navigation</code> which supports a static method called <a href=\"https://reactnavigation.org/docs/stack-navigator.html#navigationoptions-used-by-stacknavigator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">navigationOptions</a> to override header title and styles.</p>\n<p>The loading screen works as intended, but the header styles are gone! What happened? <a href=\"https://reactjs.org/docs/higher-order-components.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Static methods arenâ€™t copied over!</a> Itâ€™s super easy to overlook but also super easy to fix.</p>\n<p>Thereâ€™s a library called <a href=\"https://github.com/mridgway/hoist-non-react-statics\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hoist-non-react-statics</a> that will automatically copy over static variables like <code class=\"language-text\">navigationOptions</code>Â , <code class=\"language-text\">defaultProps</code>and <code class=\"language-text\">propTypes</code>.</p>\n<h3 id=\"second-pass-hoisting-static-variables\"><a href=\"#second-pass-hoisting-static-variables\" aria-label=\"second pass hoisting static variables permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Second Pass: Hoisting Static Variables</h3>\n<p>Second pass at LoadingScreen higher-order component</p>\n<p>Instead of returning the class immediately, we return it only after calling <code class=\"language-text\">hoistNonReactStatics</code>Â . The header is rendering correctly again. Woo!</p>\n<h3 id=\"third-pass-passing-in-options\"><a href=\"#third-pass-passing-in-options\" aria-label=\"third pass passing in options permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Third Pass: Passing inÂ Options</h3>\n<p>Now that the loading screen itself functions correctly, I want to pass in a different loading indicator size for different screens.</p>\n<p>Sometimes the default loading indicator is too big or the wrong color so Iâ€™d like to be able to adjust when I need to.</p>\n<p><code class=\"language-text\">connect</code> and <code class=\"language-text\">graphql</code> both give you options:</p>\n<ul>\n<li><code class=\"language-text\">connect(mapStateToProps, mapActionCreators)</code></li>\n<li><code class=\"language-text\">graphql(MyQuery, { options })</code></li>\n</ul>\n<p>We can do the same by adding another function call:</p>\n<p>withNavigationOptions Higher Order Component with additional options</p>\n<p>In this case I wanted to control the size of the <code class=\"language-text\">ActivityIndicator</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">withLoadingScreen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"large\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>InfoScreen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// or using compose:</span>\n\n<span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">withLoadingScreen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"large\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n    mapStateToProps<span class=\"token punctuation\">,</span>\n    mapActionCreators\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>InfoScreen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"bonus-round-naming-your-components\"><a href=\"#bonus-round-naming-your-components\" aria-label=\"bonus round naming your components permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bonus Round: Naming Your Components</h3>\n<p>Youâ€™re bound to run into issues. Sometimes the component name doesnâ€™t show up or doesnâ€™t match the component in question. We can fix this easily by writing a simple function called <code class=\"language-text\">getDisplayName</code>Â :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getDisplayName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    WrappedComponent<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">||</span> WrappedComponent<span class=\"token punctuation\">.</span>name <span class=\"token operator\">||</span> <span class=\"token string\">\"LoadingScreen\"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A higher-order component with a display name</p>\n<h3 id=\"conclusion\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h3>\n<p>Higher-order components have a few weird things about them that you can fix easily. Code responsibly.</p>","timeToRead":4,"fields":{"slug":"blog/2018-04-24_Learning-Higher-Order-Components-in-React-by-Building-a-Loading-Screen-9f705b89f569/"},"frontmatter":{"title":"Learning Higher-Order Components in React","date":"April 24, 2018","description":"We're building a general purpose loading screen"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"blog/2018-04-24_Learning-Higher-Order-Components-in-React-by-Building-a-Loading-Screen-9f705b89f569/","previous":{"fields":{"slug":"blog/2018-03-03_Your-first-ReasonML-PR-into-an-existing-React-Native-Codebase-a490b4a79649/"},"frontmatter":{"title":"Your first ReasonML PR into an existing React Native Codebase"}},"next":null}}}