{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018-01-06_Shaving-2-Minutes-Off-Our-Graphcool-Deployment-Times-f2565d21739c/","webpackCompilationHash":"f146ed55f93bb0a77a00","result":{"data":{"site":{"siteMetadata":{"title":"Peter Piekarczyk","author":"@peterpme"}},"markdownRemark":{"id":"e94cc30a-cf04-5170-ad7d-3d5074ed1b20","excerpt":"Photo by [Erik Eastman](https://unsplash.com/photos/yiptq3TFiX8?utm_source=unsplash&utm_medium=referral&utm_content…","html":"<p><img src=\"https://cdn-images-1.medium.com/max/800/1*emGM4P2MpMFkQ2pIT1Cifg.jpeg\" alt=\"Photo by [Erik Eastman](https://unsplash.com/photos/yiptq3TFiX8?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText) on [Unsplash](https://unsplash.com/?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText)\">\nPhoto by <a href=\"https://unsplash.com/photos/yiptq3TFiX8?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Erik Eastman</a> on <a href=\"https://unsplash.com/?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Unsplash</a></p>\n<p><a href=\"https://graph.cool\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Graphcool</a> is an awesome GraphQL-powered backend we use at <a href=\"https://www.orchard.ai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Orchard</a>. One of the features they offer is custom functions (resolvers) a la AWS Lambda.</p>\n<p>The thing is, deploying to any environment includes both prod AND dev dependencies inside your node_modules folder. That means eslint and anything else you have in that directory.</p>\n<p>I’m sure this will change soon enough, but for now there’s a few simple steps we can follow to minimize our bundle size &#x26; time spent deploying:</p>\n<ol>\n<li>Remove any files &#x26; folders that aren’t related to Graphcool. That goes for any scripts, utilities, functions, etc that don’t need to live here.</li>\n</ol>\n<p><strong>/src only includes the functions we require. Nothing else.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"tree\"><pre class=\"language-tree\"><code class=\"language-tree\">├── README.md\n├── graphcool.yml\n├── node_modules\n├── package.json\n├── src\n├── types.graphql\n└── yarn.lock</code></pre></div>\n<ol start=\"2\">\n<li>Create npm commands in your package.json that will delete node_modules and only install packages required for production. Now you’ll know for sure that none of your eslint stuff will be bundled and deployed.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"deploy:dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rm -rf node_modules &amp;&amp; yarn --prod &amp;&amp; graphcool deploy -t dev &amp;&amp; yarn\"</span></code></pre></div>\n<ol start=\"3\">\n<li>Lastly, <strong>YMMV</strong> but yarn includes a <code class=\"language-text\">—-flat</code>flag you can use to only install one version of a package across ALL your dependencies. We didn’t run into any issues using this, but you might so give it a go on dev first:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"deploy:dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rm -rf node_modules &amp;&amp; yarn --prod --flat &amp;&amp; graphcool deploy -t dev &amp;&amp; yarn\"</span></code></pre></div>\n<p>We were going to go as far as removing lodash and installing only the modules we use (lodash.chunk, lodash.get) but after running — flat, we discovered some of our node modules already require lodash and saved ourselves the hassle by just forcing that version. Our yarn.lock file is like 100x smaller!</p>\n<h4 id=\"we-went-from-120s-deployments-down-to-191s\"><a href=\"#we-went-from-120s-deployments-down-to-191s\" aria-label=\"we went from 120s deployments down to 191s permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>We went from 120s deployments down to 19.1s!</h4>\n<p>So it was worth writing about :)</p>","timeToRead":2,"fields":{"slug":"blog/2018-01-06_Shaving-2-Minutes-Off-Our-Graphcool-Deployment-Times-f2565d21739c/"},"frontmatter":{"title":"Shaving 2 Minutes Off Our Graphcool Deployment Times","date":"January 06, 2018","description":"In as little as 1 minute"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"blog/2018-01-06_Shaving-2-Minutes-Off-Our-Graphcool-Deployment-Times-f2565d21739c/","previous":{"fields":{"slug":"blog/2018-01-02_Environment-Variables-in-Expo-using-Release-Channels-4934594c5307/"},"frontmatter":{"title":"Environment Variables in Expo using Release Channels"}},"next":{"fields":{"slug":"blog/2018-02-05_Taming-React-Native-s-ScrollView-with-flex-144e6ff76c08/"},"frontmatter":{"title":"Taming React Native’s ScrollView with flex"}}}}}