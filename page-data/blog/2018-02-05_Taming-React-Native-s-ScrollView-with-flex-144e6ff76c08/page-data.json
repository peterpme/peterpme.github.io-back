{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018-02-05_Taming-React-Native-s-ScrollView-with-flex-144e6ff76c08/","webpackCompilationHash":"f146ed55f93bb0a77a00","result":{"data":{"site":{"siteMetadata":{"title":"Peter Piekarczyk","author":"@peterpme"}},"markdownRemark":{"id":"3f45eb7c-85ed-5fcb-ac71-5070990451c2","excerpt":"Time and time again I find myself fighting a ScrollView to get it to work the way I want it to. Is it flex? Is it the…","html":"<p>Time and time again I find myself fighting a ScrollView to get it to work the way I want it to. Is it flex? Is it the ScrollView? It was time I wrote an article.</p>\n<p>My favorite scenario, the one that inspired this article, the one that I <em>always</em> forget about, the one I recently encountered for <a href=\"https://www.orchard.ai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Orchard</a>, (what a build-up) is one where I’d like the screen to scroll normally when things don’t fit and <code class=\"language-text\">justify-content: space-between</code> when there’s room.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*ufHTLmxN3lbS0lkYIkt7wA.png\" alt=\"A comparison between what the screens should look like on an iPhone 5s. vs iPhone X\">\nA comparison between what the screens should look like on an iPhone 5s. vs iPhone X</p>\n<h4 id=\"a-couple-of-different-solutions-came-to-mind-at-first\"><a href=\"#a-couple-of-different-solutions-came-to-mind-at-first\" aria-label=\"a couple of different solutions came to mind at first permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A couple of different solutions came to mind at first:</h4>\n<ul>\n<li>Use either <code class=\"language-text\">View</code> or <code class=\"language-text\">ScrollView</code> depending on the device height (meh)</li>\n<li>Decrease the text size until everything fit (meh)</li>\n<li>Place the “Privacy Policy” outside of the <code class=\"language-text\">ScrollView</code> making it sticky, but it felt weird to scroll over and still see the privacy policy.</li>\n</ul>\n<p>I felt like these options would either make my life miserable or even worse: the user’s life miserable. I went to the docs for <code class=\"language-text\">ScrollView</code> and read over <a href=\"https://facebook.github.io/react-native/docs/scrollview.html#contentcontainerstyle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">contentContainerStyle</code></a>:</p>\n<blockquote>\n<p>These styles will be applied to the scroll view content container which wraps all of the child views</p>\n</blockquote>\n<p>contentContainerStyle is a step in the right direction. It will apply styles to the content container as if there were a <code class=\"language-text\">View</code> wrapping your children.</p>\n<p>It worked great on the iPhone X. There was enough room so everything was justified vertically. But what happens when you try this on a smaller device like the iPhone 5s? It sticks! Why?</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*YTUsQLCjenUOf4TrcbHz-A.gif\" alt=\"iPhone 5s with a ScrollView that doesn’t scroll\">\niPhone 5s with a ScrollView that doesn’t scroll</p>\n<h4 id=\"react-native-flex-vs-css-flex\"><a href=\"#react-native-flex-vs-css-flex\" aria-label=\"react native flex vs css flex permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Native Flex vs. CSS Flex</h4>\n<p>It turns out that <code class=\"language-text\">flex</code> <a href=\"https://facebook.github.io/react-native/docs/layout-props.html#flex\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">functions a bit differently</a> in React Native than it does in CSS which is why setting <code class=\"language-text\">flex: 1</code> didn’t work the way I thought it would.</p>\n<p>In CSS, <code class=\"language-text\">flex</code> is short-hand for controlling the following properties:</p>\n<ul>\n<li><code class=\"language-text\">flex-grow</code></li>\n<li><code class=\"language-text\">flex-shrink</code></li>\n<li><code class=\"language-text\">flex-basis</code></li>\n</ul>\n<p>Writing <code class=\"language-text\">flex: 1</code> in CSS is shorthand for:</p>\n<ul>\n<li><code class=\"language-text\">flex-grow: 1</code></li>\n<li><code class=\"language-text\">flex-shrink: 1</code></li>\n<li><code class=\"language-text\">flex-basis: 0</code></li>\n</ul>\n<p>In React Native, on the other hand, <code class=\"language-text\">flex</code> consumes a number, not an string and it works like this:</p>\n<ul>\n<li>positive number — component becomes flexible and will function proportionally to its value. A value of 2 will take up twice as much space as a sibling that has a value of 1.</li>\n<li>0 — the component isn’t flexible and is sized by <code class=\"language-text\">width</code> and <code class=\"language-text\">height</code> .</li>\n<li>-1 — the component is sized by its <code class=\"language-text\">width</code> and <code class=\"language-text\">height</code> but if there’s not enough space, it will shrink to satisfy <code class=\"language-text\">minWidth</code> and <code class=\"language-text\">minHeight</code> .</li>\n</ul>\n<h4 id=\"flex-grow\"><a href=\"#flex-grow\" aria-label=\"flex grow permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flex Grow</h4>\n<p>Writing <code class=\"language-text\">flex-grow: 1</code> in CSS is shorthand for:</p>\n<ul>\n<li><code class=\"language-text\">flex-grow: 1</code></li>\n<li><code class=\"language-text\">flex-shrink: 1</code></li>\n<li><code class=\"language-text\">flex-basis: auto</code> (this is different!)</li>\n</ul>\n<p><code class=\"language-text\">flex-grow</code> distributes <strong>free space</strong> to <code class=\"language-text\">flex</code> items. When there is no free space, <code class=\"language-text\">flex-grow</code> does nothing and <code class=\"language-text\">flex-shrink</code> takes over to determine how much items will shrink relative to its siblings (instead of grow).</p>\n<h4 id=\"why-does-this-matter\"><a href=\"#why-does-this-matter\" aria-label=\"why does this matter permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why does this matter?</h4>\n<p>The solution has to do with the implementation differences of <code class=\"language-text\">flex</code> and <code class=\"language-text\">flexGrow</code> in React Native.</p>\n<p>Since <code class=\"language-text\">flexGrow</code> functions the same way, we can easily solve this problem by updating our <code class=\"language-text\">contentContainerStyle</code> to <code class=\"language-text\">flexGrow: 1</code> instead:</p>\n<p>Using flexGrow vs. flex in contentContainerStyle prop\n<img src=\"https://cdn-images-1.medium.com/max/800/1*srqvcWdFNXICYCw7xhb4Mw.gif\" alt=\"iPhone 5s with a ScrollView that scrolls correctly\">\niPhone 5s with a ScrollView that scrolls correctly</p>\n<p>Hopefully neither of us will have to struggle with a <code class=\"language-text\">ScrollView</code> and <code class=\"language-text\">flex</code> again!</p>","timeToRead":3,"fields":{"slug":"blog/2018-02-05_Taming-React-Native-s-ScrollView-with-flex-144e6ff76c08/"},"frontmatter":{"title":"Taming React Native’s ScrollView with flex","date":"February 05, 2018","description":"Is it flex? Is it the ScrollView?"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"blog/2018-02-05_Taming-React-Native-s-ScrollView-with-flex-144e6ff76c08/","previous":{"fields":{"slug":"blog/2018-01-06_Shaving-2-Minutes-Off-Our-Graphcool-Deployment-Times-f2565d21739c/"},"frontmatter":{"title":"Shaving 2 Minutes Off Our Graphcool Deployment Times"}},"next":{"fields":{"slug":"blog/2018-03-03_Your-first-ReasonML-PR-into-an-existing-React-Native-Codebase-a490b4a79649/"},"frontmatter":{"title":"Your first ReasonML PR into an existing React Native Codebase"}}}}}