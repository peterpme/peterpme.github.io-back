{"version":3,"sources":["webpack:///./src/pages/blog.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["BlogIndex","render","data","this","props","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_2__","location","gatsby__WEBPACK_IMPORTED_MODULE_1__","to","rel","className","_components_seo__WEBPACK_IMPORTED_MODULE_3__","map","_ref","node","frontmatter","fields","slug","key","style","boxShadow","dangerouslySetInnerHTML","__html","description","excerpt","React","Component","pageQuery","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","loader","enqueue","createContext","ProdPageRenderer","pageResources","InternalPageRenderer","Object","assign","json","SEO","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","Header","react_default","background","marginBottom","margin","maxWidth","padding","gatsby_browser_entry","color","textDecoration","Layout","children","_856328897","Fragment"],"mappings":"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","file":"component---src-pages-blog-js-c1e22acb6a9ee307ad9b.js","sourcesContent":["import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props;\n    const siteTitle = data.site.siteMetadata.title;\n    const posts = data.allMarkdownRemark.edges;\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <Link to=\"/\" rel=\"home\" className=\"text-2xl\">\n          ‚Üê\n        </Link>\n        <SEO title=\"All posts\" />\n        <ul>\n          {posts.map(({ node }) => {\n            const title = node.frontmatter.title || node.fields.slug;\n            return (\n              <li key={node.fields.slug} className=\"mb-4\">\n                <Link\n                  className=\"text-white font-bold\"\n                  style={{ boxShadow: `none` }}\n                  to={node.fields.slug}>\n                  {title}\n                </Link>\n                <p\n                  dangerouslySetInnerHTML={{\n                    __html: node.frontmatter.description || node.excerpt,\n                  }}\n                />\n              </li>\n            );\n          })}\n        </ul>\n      </Layout>\n    );\n  }\n}\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `rebeccapurple`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nimport Header from \"./header\";\nimport \"./layout.css\";\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  return (\n    <>\n      <div className=\"bg fixed right-0 top-0 bottom-0 w-3/5 h-screen bg-cover bg-no-repeat\" />\n      <main className=\"z-10 p-fixed bg-purple-900 min-h-screen text-gray-500 leading-relaxed max-w-2xl px-6 sm:pr-20 sm:pl-20 py-6\">\n        {children}\n      </main>\n    </>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n\n"],"sourceRoot":""}